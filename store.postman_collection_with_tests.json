{
	"info": {
		"_postman_id": "993c31a8-8fc3-48e1-a4af-416da0c07490",
		"name": "store",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23348566"
	},
	"item": [
		{
			"name": "Products",
			"item": [
				{
					"name": "Create product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"New product 'orange' was added\", function () {\r",
									"    const new_product = \"orange\";\r",
									"    const orrange_id = pm.response.json().id;\r",
									"    pm.sendRequest(pm.collectionVariables.get(\"baseUrl\") + \"/products/\" + orrange_id, function (err, response) {\r",
									"            pm.expect(response.json().name).to.eql(new_product);            \r",
									"       \r",
									"    });\r",
									"});\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the response is correct\", () => {      \r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.name).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.price).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.sku).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.description).to.be.an(\"string\");       \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"orange\",\r\n    \"price\": 8,\r\n    \"sku\": 123321123,\r\n    \"description\": \"wouh\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create product (negative cases)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404, the server was unable to find this page\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Cookie JSESSIONID is not present\", () => {\r",
									"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.false;\r",
									"});\r",
									"pm.test(\"Response time is less than 12ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(12);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/html; charset=utf-8');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/14",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"14"
							]
						}
					},
					"response": []
				},
				{
					"name": "List products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the response is correct\", () => {  \r",
									"    for (const i of jsonData){\r",
									"            pm.expect(i).to.be.an(\"object\");\r",
									"            pm.expect(i.id).to.be.a(\"number\");\r",
									"            pm.expect(i.name).to.be.a(\"string\");\r",
									"            pm.expect(i.price).to.be.a(\"number\");\r",
									"            pm.expect(i.sku).to.be.a(\"number\");\r",
									"            pm.expect(i.description).to.be.an(\"string\");\r",
									"        }      \r",
									"});\r",
									"var _ = require('lodash');   \r",
									"responseArray = JSON.parse(responseBody);\r",
									"\r",
									"pm.test('Products names are in sorted order', () => {\r",
									"    var expectedSortedOrder = _.orderBy(responseArray, ['id'],['asc']);\r",
									"    pm.expect(responseArray).to.eql(expectedSortedOrder);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get product by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the response is correct\", () => {      \r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.name).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.price).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.sku).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.description).to.be.an(\"string\");       \r",
									"});\r",
									"pm.test(\"Response property matches environment variable\", function () {\r",
									"    const products = [\"tomato\", \"lettuce\", \"apple\"]\r",
									"    for (let i = 1; i <= 3; i++) {\r",
									"    pm.sendRequest(pm.collectionVariables.get(\"baseUrl\") + \"/products/\" + i, function (err, response) {\r",
									"        switch (i) {\r",
									"            case 1: pm.expect(response.json().name).to.eql(products[0]);\r",
									"                break;\r",
									"            case 2: pm.expect(response.json().name).to.eql(products[1]);\r",
									"                break;\r",
									"            case 3: pm.expect(response.json().name).to.eql(products[2]);\r",
									"                break;\r",
									"            default: console.log(\"No matches\");\r",
									"        }        \r",
									"    });\r",
									"}\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get product by ID (negative cases)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404, the server was unable to find this page\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Cookie JSESSIONID is not present\", () => {\r",
									"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.false;\r",
									"});\r",
									"pm.test(\"Response time is less than 12ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(12);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the response is object\", () => {      \r",
									"    pm.expect(jsonData).to.be.an(\"object\");     \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/0",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"pm.test(\"The product was updated\", function () {\r",
									"    const new_product = \"banana\";\r",
									"    const product_id = pm.response.json().id;\r",
									"    pm.sendRequest(pm.collectionVariables.get(\"baseUrl\") + \"/products/\" + product_id, function (err, response) {\r",
									"        pm.expect(pm.response.json().name).to.eql(new_product)   \r",
									"    });\r",
									"});\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the response is correct\", () => {      \r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.name).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.price).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.sku).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.description).to.be.an(\"string\");       \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 4,\r\n    \"name\": \"banana\",\r\n    \"price\": 155,\r\n    \"sku\": 123321123,\r\n    \"description\": \"changed description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update product (negative cases)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404, the server was unable to find this page\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Cookie JSESSIONID is not present\", () => {\r",
									"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.false;\r",
									"});\r",
									"pm.test(\"Response time is less than 20ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(20);\r",
									"});\r",
									"pm.test(\"Response has the error message\", function () {\r",
									"    pm.response.to.have.body(\"Item not found with IDundefined\");\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/html; charset=utf-8');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 0,\r\n    \"name\": \"blackberry\",\r\n    \"price\": 281,\r\n    \"sku\": 123,\r\n    \"description\": \"twice changed description\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove product by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Current product was deleted\", function () {\r",
									"    const error_message = \"Not Found\";\r",
									"    pm.sendRequest(pm.collectionVariables.get(\"baseUrl\") + \"/products/4\", function (err, response) {\r",
									"            pm.expect(response.status).to.eql(error_message);            \r",
									"                \r",
									"    });\r",
									"});\r",
									"pm.test(\"Cookie JSESSIONID is not present\", () => {\r",
									"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.false;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/4",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"4"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "Create order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"New order 'order5' was added\", function () {\r",
									"    const new_order = \"order5\";\r",
									"    const order_id = pm.response.json().id;\r",
									"    pm.sendRequest(pm.collectionVariables.get(\"baseUrl\") + \"/orders/\" + order_id, function (err, response) {\r",
									"        pm.expect(response.json().name).to.eql(new_order);     \r",
									"    });\r",
									"});\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the response is correct\", () => {      \r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.name).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.sku).to.be.a(\"number\");     \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"order5\",\r\n    \"sku\": 123425445656765\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create order (negative cases)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404, the server was unable to find this page\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Cookie JSESSIONID is not present\", () => {\r",
									"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.false;\r",
									"});\r",
									"pm.test(\"Response time is less than 15ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(15);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/html; charset=utf-8');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/88",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"88"
							]
						}
					},
					"response": []
				},
				{
					"name": "List orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the response is correct\", () => {  \r",
									"    for (const i of jsonData){\r",
									"            pm.expect(i).to.be.an(\"object\");\r",
									"            pm.expect(i.id).to.be.a(\"number\");\r",
									"            pm.expect(i.name).to.be.a(\"string\");\r",
									"            pm.expect(i.sku).to.be.a(\"number\");\r",
									"        }      \r",
									"});\r",
									"var _ = require('lodash');   \r",
									"responseArray = JSON.parse(responseBody);\r",
									"\r",
									"pm.test('Products names are in sorted order', () => {\r",
									"    var expectedSortedOrder = _.orderBy(responseArray, ['id'],['asc']);\r",
									"    pm.expect(responseArray).to.eql(expectedSortedOrder);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the response is correct\", () => {      \r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"        pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"        pm.expect(jsonData.name).to.be.a(\"string\");\r",
									"        pm.expect(jsonData.sku).to.be.a(\"number\");   \r",
									"});\r",
									"pm.test(\"Response property matches environment variable\", function () {\r",
									"    const orders = [\"order1\", \"order2\"]\r",
									"    for (let i = 1; i <= 3; i++) {\r",
									"    pm.sendRequest(pm.collectionVariables.get(\"baseUrl\") + \"/orders/\" + i, function (err, response) {\r",
									"        switch (i) {\r",
									"            case 1: pm.expect(response.json().name).to.eql(orders[0]);\r",
									"                break;\r",
									"            case 2: pm.expect(response.json().name).to.eql(orders[1]);\r",
									"                break;\r",
									"            case 3: pm.expect(response.json().name).to.eql(orders[1]);\r",
									"                break;\r",
									"            default: console.log(\"No matches\");\r",
									"        }        \r",
									"    });\r",
									"}\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get order by ID (negative cases)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404, the server was unable to find this page\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Cookie JSESSIONID is not present\", () => {\r",
									"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.false;\r",
									"});\r",
									"pm.test(\"Response time is less than 20ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(20);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the response is object\", () => {      \r",
									"    pm.expect(jsonData).to.be.an(\"object\");     \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/100",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"100"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"pm.test(\"The order was updated\", function () {\r",
									"    const new_order = \"order5_update\";\r",
									"    const order_id = pm.response.json().id;\r",
									"    pm.sendRequest(pm.collectionVariables.get(\"baseUrl\") + \"/orders/\" + order_id, function (err, response) {\r",
									"        pm.expect(pm.response.json().name).to.eql(new_order)   \r",
									"    });\r",
									"});\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the response is correct\", () => {      \r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.name).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.sku).to.be.a(\"number\");       \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 4,\r\n    \"name\": \"order5_update\",\r\n    \"sku\": 123425445656765\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update order (negative cases)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404, the server was unable to find this page\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Cookie JSESSIONID is not present\", () => {\r",
									"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.false;\r",
									"});\r",
									"pm.test(\"Response time is less than 30ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(30);\r",
									"});\r",
									"pm.test(\"Response has the error message\", function () {\r",
									"    pm.response.to.have.body(\"Item not found with IDundefined\");\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/html; charset=utf-8');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 41,\r\n    \"name\": \"order5_updated_twice\",\r\n    \"sku\": 123425445656765\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Current order was deleted\", function () {\r",
									"    const error_message = \"Not Found\";\r",
									"    pm.sendRequest(pm.collectionVariables.get(\"baseUrl\") + \"/orders/4\", function (err, response) {\r",
									"            pm.expect(response.status).to.eql(error_message);            \r",
									"                \r",
									"    });\r",
									"});\r",
									"pm.test(\"Cookie JSESSIONID is not present\", () => {\r",
									"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.false;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/4",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"4"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 150ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(150);\r",
									"});\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"New user 'Dream Real' was added\", function () {\r",
									"    const new_user_name = \"Dream\";\r",
									"    const new_user_lastname = \"Real\";\r",
									"    const order_id = pm.response.json().id;\r",
									"    pm.sendRequest(pm.collectionVariables.get(\"baseUrl\") + \"/users/\" + order_id, function (err, response) {\r",
									"        pm.expect(response.json().firstName).to.eql(new_user_name);    \r",
									"        pm.expect(response.json().lastName).to.eql(new_user_lastname);    \r",
									"    });\r",
									"});\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the response is correct\", () => {      \r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"        pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"        const params = [\"firstName\", \"lastName\",\"email\",\"dateOfBirth\",\"signUpDate\",\"status\",\"level\"]\r",
									"        for ( const j of params) {            \r",
									"            pm.expect(jsonData[j]).to.be.a(\"string\");\r",
									"        }     \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Dream\",\r\n    \"lastName\": \"Real\",\r\n    \"email\": \"dream.real@gmail.com\",\r\n    \"dateOfBirth\": \"2001-10-99\",\r\n    \"emailVerified\": true,\r\n    \"signUpDate\": \"2019-08-24\",\r\n    \"status\": \"active\",\r\n    \"level\": \"lord\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user (negative cases)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404, the server was unable to find this page\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Cookie JSESSIONID is not present\", () => {\r",
									"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.false;\r",
									"});\r",
									"pm.test(\"Response time is less than 20ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(20);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/html; charset=utf-8');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/513",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"513"
							]
						}
					},
					"response": []
				},
				{
					"name": "List users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the response is correct\", () => {  \r",
									"    for (const i of jsonData){\r",
									"        pm.expect(i).to.be.an(\"object\");\r",
									"        pm.expect(i.id).to.be.a(\"number\");\r",
									"        const params = [\"firstName\", \"lastName\",\"email\",\"dateOfBirth\",\"signUpDate\",\"status\",\"level\"]\r",
									"        for ( const j of params) {            \r",
									"            pm.expect(i[j]).to.be.a(\"string\");\r",
									"        }    \r",
									"    }  \r",
									"});\r",
									"var _ = require('lodash');   \r",
									"responseArray = JSON.parse(responseBody);\r",
									"\r",
									"pm.test('Products names are in sorted order', () => {\r",
									"    var expectedSortedOrder = _.orderBy(responseArray, ['id'],['asc']);\r",
									"    pm.expect(responseArray).to.eql(expectedSortedOrder);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the response is correct\", () => {      \r",
									"        pm.expect(jsonData).to.be.an(\"object\");\r",
									"        pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"        const params = [\"firstName\", \"lastName\",\"email\",\"dateOfBirth\",\"signUpDate\",\"status\",\"level\"]\r",
									"        for ( const j of params) {            \r",
									"            pm.expect(jsonData[j]).to.be.a(\"string\");\r",
									"        }    \r",
									"    \r",
									"});\r",
									"pm.test(\"Response property matches environment variable\", function () {\r",
									"    const user_email = [\"alice.smith@gmail.com\", \"bob.smith@gmail.com\", \"joe.smith@gmail.com\", \"vesta.smith@gmail.com\", \"dax.smith@gmail.com\", \"naruto.smith@gmail.com\", \"saske.smith@gmail.com\",\"kukareku.smith@gmail.com\",\"asdasd.smith@gmail.com\"]\r",
									"    for (let i = 1; i < 10; i++) {\r",
									"    pm.sendRequest(pm.collectionVariables.get(\"baseUrl\") + \"/users/\" + i, function (err, response) {\r",
									"        switch (i) {\r",
									"            case 1: pm.expect(response.json().email).to.eql(user_email[0]);\r",
									"                break;\r",
									"            case 2: pm.expect(response.json().email).to.eql(user_email[1]);\r",
									"                break;\r",
									"            case 3: pm.expect(response.json().email).to.eql(user_email[2]);\r",
									"                break;\r",
									"            case 4: pm.expect(response.json().email).to.eql(user_email[3]);\r",
									"                break;\r",
									"            case 5: pm.expect(response.json().email).to.eql(user_email[4]);\r",
									"                break;\r",
									"            case 6: pm.expect(response.json().email).to.eql(user_email[5]);\r",
									"                break;\r",
									"            case 7: pm.expect(response.json().email).to.eql(user_email[6]);\r",
									"                break;\r",
									"            case 8: pm.expect(response.json().email).to.eql(user_email[7]);\r",
									"                break;\r",
									"            case 9: pm.expect(response.json().email).to.eql(user_email[8]);\r",
									"                break;\r",
									"            default: console.log(\"No matches\");\r",
									"        }        \r",
									"    });\r",
									"}\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user by ID (negative cases)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404, the server was unable to find this page\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Cookie JSESSIONID is not present\", () => {\r",
									"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.false;\r",
									"});\r",
									"pm.test(\"Response time is less than 15ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(15);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the response is object\", () => {      \r",
									"    pm.expect(jsonData).to.be.an(\"object\");     \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/404",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"404"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"pm.test(\"The user was updated\", function () {\r",
									"    const new_user_name = \"Ilon\";\r",
									"    const new_user_lastname = \"Mask\";\r",
									"    const user_id = pm.response.json().id;\r",
									"    pm.sendRequest(pm.collectionVariables.get(\"baseUrl\") + \"/users/\" + user_id, function (err, response) {\r",
									"        pm.expect(response.json().firstName).to.eql(new_user_name);    \r",
									"        pm.expect(response.json().lastName).to.eql(new_user_lastname);  \r",
									"    });\r",
									"});\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the response is correct\", () => {      \r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"        pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"        const params = [\"firstName\", \"lastName\",\"email\",\"dateOfBirth\",\"signUpDate\",\"status\",\"level\"]\r",
									"        for ( const j of params) {            \r",
									"            pm.expect(jsonData[j]).to.be.a(\"string\");\r",
									"        }         \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Ilon\",\r\n    \"lastName\": \"Mask\",\r\n    \"email\": \"ilon.mask@gmail.com\",\r\n    \"dateOfBirth\": \"2001-10-99\",\r\n    \"emailVerified\": true,\r\n    \"signUpDate\": \"2019-08-24\",\r\n    \"status\": \"active\",\r\n    \"level\": \"lord\",\r\n    \"id\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user (negative cases)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404, the server was unable to find this page\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Cookie JSESSIONID is not present\", () => {\r",
									"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.false;\r",
									"});\r",
									"pm.test(\"Response time is less than 20ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(20);\r",
									"});\r",
									"pm.test(\"Response has the error message\", function () {\r",
									"    pm.response.to.have.body(\"Item not found with IDundefined\");\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/html; charset=utf-8');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Ilon\",\r\n    \"lastName\": \"Mask\",\r\n    \"email\": \"ilon.mask@gmail.com\",\r\n    \"dateOfBirth\": \"2001-10-99\",\r\n    \"emailVerified\": true,\r\n    \"signUpDate\": \"2019-08-24\",\r\n    \"status\": \"active\",\r\n    \"level\": \"lord\",\r\n    \"id\": 704\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove user by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Current user was deleted\", function () {\r",
									"    const error_message = \"Not Found\";\r",
									"    pm.sendRequest(pm.collectionVariables.get(\"baseUrl\") + \"/users/10\", function (err, response) {\r",
									"            pm.expect(response.status).to.eql(error_message);            \r",
									"                \r",
									"    });\r",
									"});\r",
									"pm.test(\"Cookie JSESSIONID is not present\", () => {\r",
									"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.false;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"10"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000",
			"type": "string"
		}
	]
}